1- what is logging ?

- is very usefull tool in programmer toolkit
- better understanding flow of app.

===========================================================================

2- what is the logging module?

- it makes it easy to add log output.
- used by most of third part libraries, so you can combine you own log output with that of
the libraries you are using to create comprhensive logs

- just use [import logging]

- logging module provides default logger that is great for getting started.
- to lo and event, we must first assign it a severity[خطورة]. that represent how severity even is
- then we can log only events of a specific severity level or greater
  which help us to maintain clean logs that don't contain unnecessary events.

===========================================================================
3- there are [5] severity levels that we can use by default

- DEBUG is the least severe, critical is the most.


- DEBUG
- INFO
- WARNING
- ERROR
- CRITICAL

so, if the logging set as WARNING, it means we can just log events [WARNING, ERROR, CRITICAL]
means [DEBUG, INFO] events won't be logged

===========================================================================
4- logging module contains function for every severity level[ 5 functions with 5 levels]

logging.debug("DEBUG")  # NO OUTPUT
logging.info("INFO")    # NO OUTPUT
logging.warning("TEST WARNING")  # WARNING:root:TEST WARNING
logging.error("TEST ERROR")      # ERROR:root:TEST ERROR
logging.critical("TEST CRITICAL")  # CRITICAL:root:TEST CRITICAL

- root is the name of the default logger


the default logger logs events marked as WARNING or more severe. which means log events [WARNING, ERROR, CRITICAL]

that why the output is:

WARNING:root:TEST WARNING
ERROR:root:TEST ERROR
CRITICAL:root:TEST CRITICAL

- default logging format is [level:default logger name: message] ===> CRITICAL:root:TESTING MESSAGE

===========================================================================

5- the basicConfig method is used to config logging [ method in camelCase because it comes from loggin utils in Java]

common parameters:
- level: set the minimal severity level to log
- filename: file to log to.
- filemode: mode to open file in, a(append) is the default.
- format: the format of the log message.


===========================================================================

6- if you are using

logging.basicConfig(level=logging.DEBUG, filename="app.log", format="%(name)s - %(levelname)s - %(message)s")

so, so logs will added to filename [app.log] not to console.

- [%(name)s - %(levelname)s - %(message)s] : are built in  variables that represent exactly what you think they would

- later you can use your own variables here.

===========================================================================
7-


logging.basicConfig(
            level=logging.DEBUG,
            filename="app.log",
            format="%(name)s - %(levelname)s - %(message)s",
        )

# basicConfig can only be called once.

# the severity level functions [debug, info, warning, error, critical] call basicConfig internally
# if it has not been called before.

# that means we must call basicConfig() ourselves before we use any of the severity level functions.[ 5 funcs]

# calling basicConfig() just like override the default configurations
# [default logger name is root, default level is: WARNING].


===========================================================================

8- file#4_formating_the_output

# built in logging variables [ asctime, levelname, pathname, lineno, message, ....].
# asctime: time of creation of log record.
# logging variables: are part of log record
# logging record: is meta data that is associated with certain event.
# example: [10/Aug/2021 11:31:30] INFO [E:/containers/learn-projects/python-logging/4_formatting_the_output.py:26] test



# 1-1 : adding log format
# datefmt="%d/%b/%Y %H:%M:%S" is easy to read more that default one and customizable, so we can change it on need.
format_ = logging.Formatter(
    "[%(asctime)s] %(levelname)s [%(pathname)s:%(lineno)s] %(message)s",
    datefmt="%d/%b/%Y %H:%M:%S",
)


# 2- for console logging [console handle ch]
ch = logging.StreamHandler()
ch.setFormatter(format_)
logger.addHandler(ch)

# 3- for file logging [file handler fh]
fh = handlers.RotatingFileHandler("logs.log", maxBytes=(1048576 * 5), backupCount=7)
fh.setFormatter(format_)
logger.addHandler(fh)


===========================================================================

9- using varabile data to log record.

LOOK file#5 ==> 5_logging_variable_data


===========================================================================

10- capture full stack trace [traceback]
# we can use the logging module to capture the full stack trace of an application
# by passing exc_info=True as parameter.
# if exc_info is false, the program output will not show the stack trace, just the message.

LOOK: file#6 ==> 6_capturing_stack_traces
===========================================================================

11-

logging.exception(f"can not divide {x} by {y}")  # is equivalent to logging.error(msg, exc_info=True)

LOOK: file#6 ==> 6_capturing_stack_traces

===========================================================================

12-

logging.exception(f"Can Not Divide '{x}' By '{y}'")  # is equivalent to logging.error(msg, exc_info=True)
# logging.exception() is short hand for logging.error() events
# # logging.exception() uses level of ERROR. [LOOK THIS OUTPUT]
LOOK: file#6 ==> 6_capturing_stack_traces

===========================================================================

13- LOOK: file#6 ==> 6_capturing_stack_traces

try:
    username = "John"
    age = 25
    info = username + " " + age

except TypeError:
    logging.warning("Invalid contacting. use f-string or format method", exc_info=True)

    # output:
    """
    root - WARNING - Invalid contacting. use f-string or format method
    Traceback (most recent call last):
        File "E:/containers/learn-projects/python-logging/6_capturing_stack_traces.py", line 63, in <module>
            info = username + " " + age
    TypeError: can only concatenate str (not "int") to str
    """




===========================================================================




===========================================================================
